.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" translated for 2.21, 2022-05-04 ribbon <ribbon@users.osdn.me>
.\"
.TH WHICH 1   
.rn RS Rs
.de  RS
.na
.nf
.Rs
..
.rn RE Re
.de  RE
.Re
.fi
.ad
..
.de  Sx
.PP
.ne \\$1
.RS
..
.de  Ex
.RE
.PP
..
.na
.SH 名前
which \- (シェル) コマンドのフルパスを表示
.SH 書式
\fBwhich\fP [options] [\-\-] programname [...]
.SH 説明
\fBwhich\fP は
一つ以上の引数を取り、そうした引数のそれぞれについて、それがシェルプロンプトから入力された場合に、実行されていたであろう実行ファイルのフルパスを標準出力に書き出します。\fBwhich\fP
はそれを行うにあたり、 \fBbash(1)\fP と同じアルゴリズムを使用して、環境変数 \fBPATH\fP
にリストされたディレクトリを調べ、実行ファイルやスクリプトを捜します。

このマニュアルページは \fIwhich.texinfo\fP ファイルから生成されています。
.SH オプション

.TP  4
\fB\-\-all\fP, \fB\-a\fP
\fBPATH\fP 中で最初に引数に一致したものだけでなく、一致したすべての実行ファイルを表示します。
.TP 
\fB\-\-read\-alias\fP, \fB\-i\fP
標準入力からエイリアスを読み込んで、引数に一致するものを標準出力に書き出します。 このオプションは which
コマンドの代わりに使うエイリアスで使うと良いでしょう。 たとえば次のようにです。
.br
\fBalias which=\'alias | which \-i\'\fP.
.TP 
\fB\-\-skip\-alias\fP
\`\-\-read\-alias\' が指定されても、それを無視します。 このオプションは、which コマンドの代わりに使うエイリアスや関数で
\`\-\-read\-alias\' オプションを使用する場合に、 明示的に通常のバイナリを探すのに役に立ちます。
.TP 
\fB\-\-read\-functions\fP
標準入力からシェル関数定義を読み込んで、引数に一致するものを標準出力に書き出します。 このオプションは which
コマンドの代わりに使うシェル関数において使用するとよいでしょう。たとえば、次のようにです。
.br
\fBwhich() { declare \-f | which \-\-read\-functions $@ }\fP
.br
export \-f which
.TP 
\fB\-\-skip\-functions\fP
\`\-\-read\-functions\' が指定されてもそれを無視します。このオプションは which コマンドの代わりに使うエイリアスや関数で
\`\-\-read\-functions\' オプションを使用しているに、明示的に通常のバイナリを探すのに役に立ちます。
.TP 
\fB\-\-skip\-dot\fP
\fBPATH\fP 中のドット (.) 1 個のディレクトリから始まるパスをスキップします。

[訳注] 環境変数 PATH に ’.’ や (ありそうにないことですが) ’./bin’
などが登録されている場合のことを言っています。’$HOME/.local'
といったディレクトリのことではありません。そのへんの事情は、‘\-\-show\-dot’でも同じです。
.TP 
\fB\-\-skip\-tilde\fP
チルダで始まる \fBPATH\fP 内のディレクトリ、および \fBHOME\fP ディレクトリ内に存在する実行ファイルは除外します。
.TP 
\fB\-\-show\-dot\fP
\fBPATH\fP 内にドットで始まるディレクトリがあって、合致した実行ファイルがその中に見つかった場合には、フルパスでなく "./programname"
と表示します。
.TP 
\fB\-\-show\-tilde\fP
ディレクトリに \fBHOME\fP ディレクトリと一致する部分があるときは、チルダを表示します。 このオプションは \fBwhich\fP が root
権限で実行されている場合には無視されます。
.TP 
\fB\-\-tty\-only\fP
出力が端末でない場合は、これより右にあるオプションの処理を行いません。

[訳注]  このオプションに効果があるのは、'\-\-show\-dot', '\-\-show\-tilde', '\-\-skip\-dot',
\&'\-\-skip\-tilde' に対してだけのようです。
.TP 
\fB\-\-version,\-v,\-V\fP
バージョン情報を標準出力して正常終了します。
.TP 
\fB\-\-help\fP
利用方法を標準出力して正常終了します。
.SH 返り値
\fBwhich\fP は検索に失敗した引数の数を返します。 また 引数に \`programname\' が指定されなかった場合は \-1 を返します。
.SH 例
このユーティリティーの使用に当たっては、以下のように、エイリアスか (C shell の場合) シェル関数に (Bourne shell の場合)
\fBwhich\fP コマンドの代わりに使用するものを追加しておくことをお勧めします。たとえば以下です。

[ba]sh の場合:

.in +5
.nf
.na
which ()
{
  (alias; declare \-f) | /usr/bin/which \-\-tty\-only \-\-read\-alias \-\-read\-functions \-\-show\-tilde \-\-show\-dot $@
}
export \-f which
.in -5
.ad
.fi

[t]csh の場合:

.in +5
.nf
.na
alias which \'alias | /usr/bin/which \-\-tty\-only \-\-read\-alias \-\-show\-dot \-\-show\-tilde\'
.in -5
.ad
.fi

このようにしておくと、which をプロンプトから実行したときには、パスを ~/ や　./
という読みやすい形で表示しますが、スクリプトから使用した場合には、通常通りフルパスの表示になります。

.in +5
.nf
.na
> which q2
~/bin/q2
> echo \`which q2\`
/home/carlo/bin/q2

[訳注]  実際には、こうした関数やエイリアスを端末のプロンプトから実行しようと、
スクリプトから実行しようと、表示に変わりはありません。出力先が、標準出力や
標準エラーか、それ以外かで違いが生じるようです
(上記二番目の実行例では、標準入力に出力しています)。 念のため、ご自分でお試しください。
.in -5
.ad
.fi

.SH バグ
\fBHOME\fP ディレクトリの特定は、環境変数 \fBHOME\fP を調べることで行われますが、変数 \fBHOME\fP
が存在しない場合はこの特定作業は打ち切られます。また、\fBwhich\fP は
二つのディレクトリが同じものであっても、片方のパスにシンボリックリンクが含まれている場合は、別のディレクトリと見なすことになります。

[訳注]  前半の記述は古いようです。パッケージ同梱の NEWS ファイルによれば、 which\-2.19   以来、環境変数 \fBHOME\fP
が設定されていない場合は、/etc/passwd  ファイルが調べられ、そこでも指定されていない場合は、'/' がホームディレクトリになるとのことです。
.SH 著者
.br
Carlo Wood <carlo@gnu.org>
.SH 関連項目
\fBbash(1)\fP
